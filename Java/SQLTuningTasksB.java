/*
 * ConsoleWindow.java        
 *
 * Copyright (c) 2003 - 2010 Richard Wright
 * 5 Hollis Wood Drive, Wrecclesham, Farnham, Surrey.  GU10 4JT
 * All rights reserved.
 *
 * RichMon is a lightweight database monitoring tool.
 *
 * Keep up to date with the latest developement at http://richmon.blogspot.com
 *
 * Report bugs and request new features by email to support@richmon4oracle.com
 * Change History since 16/08/12
 * =============================
 *
 * 21/02/05 Richard Wright Removed unused code and renamed to SQL Tuning Tasks
 * 19/02/13 Richard Wright Added "Create Tuning Task (from AWR)" and ammended the existing option to "...(from Curosr)"
 * 14/03/14 Richard Wright Many improvements including adding output for the automatic sql tuning task in 11gR2 and
 *                         displaying results on screen with confirmation they are also saved to disk and
 *                         option to show just richmon tasks for convenience
 * 08/09/15 Richard Wright Modified to allow filter by user and improved readability
 */

package RichMon;

import java.awt.Dimension;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;

import java.util.Vector;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;

import oracle.sql.CHAR;

/**
 *
 *
 */
public class SQLTuningTasksB extends RichButton {
  JLabel statusBar; // The statusBar to be updated after a query is executed
  JScrollPane scrollP; // The JScrollPane on which output should be displayed
  ResultCache resultCache;
  String[] options; // The options listed for this button
  boolean showSQL;
  boolean tearOff;
  
  String setName = "";  // default SQL Tuning Set name
  String taskName = "";
  String profileName = "";
  
  boolean debug = false;
  
  Database database;

  /**
   * Constructor
   *
   * @param options
   * @param scrollP
   * @param statusBar
   * @param resultCache
   */
  public SQLTuningTasksB(String[] options, JScrollPane scrollP, JLabel statusBar,
                     ResultCache resultCache) {
    this.setText("SQL Tuning Tasks");
    this.options = options;
    this.scrollP = scrollP;
    this.statusBar = statusBar;
    this.resultCache = resultCache;
    this.database = ConnectWindow.getDatabase();
    
    if (ConsoleWindow.getDBVersion() >= 11.0) addItem("Show Automatic SQL Tuning Results");
  }

  public void actionPerformed(boolean showSQL) {
    this.showSQL = showSQL;
    this.tearOff = tearOff;

    // if a list frame already exists, then remove it
    ConnectWindow.getConsoleWindow().removeLastFrame();

    final JList myList = new JList(options);
    myList.setVisibleRowCount(options.length);
    JScrollPane listScroller = new JScrollPane(myList);
    final JFrame listFrame = new JFrame(this.getText());
    listFrame.add(listScroller);
    listFrame.pack();
    listFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    listFrame.setLocationRelativeTo(this);

    myList.addMouseListener(new MouseListener() {
        public void mouseClicked(MouseEvent e) {
          listActionPerformed(myList.getSelectedValue(), listFrame);
          listFrame.dispose();
        }

        public void mousePressed(MouseEvent e) {
        }

        public void mouseEntered(MouseEvent e) {
        }

        public void mouseReleased(MouseEvent e) {
        }

        public void mouseExited(MouseEvent e) {
        }
      });

    listFrame.setIconImage(ConnectWindow.getRichMonIcon().getImage());
    listFrame.setVisible(true);

    // save a reference to the listFrame so it can be removed if left behind
    ConnectWindow.getConsoleWindow().saveFrameRef(listFrame);
  }

  /**
   * Performs the user selected action
   *
   * @param selectedOption
   */
  public void listActionPerformed(Object selectedOption, JFrame listFrame) {
    String selection = selectedOption.toString();
    listFrame.setVisible(false);
    ConsoleWindow.getPerformancePanel().setLastAction(selection);
    try {

      if (selection.equals("Create Tuning Task (from Cursor)")) {
        createTuningTaskFromCursor(showSQL);
      }
      
      if (selection.equals("Create Tuning Task (from AWR)")) {
        createTuningTaskFromAWR(showSQL);
      }
      
      if (selection.equals("Execute Tuning Task")) {
        executeTuningTask(showSQL,true);
      }      
      
      if (selection.equals("Show Task Status")) {
        showTaskStatus(showSQL,tearOff);
      }      
      if (selection.equals("Show Status of Tasks Generated by RichMon")) {
        showRichMonTaskStatus(showSQL,tearOff);
      }      
      
      if (selection.equals("Show Task Progress")) {
        showTaskProgress(showSQL,tearOff);   
      }
      
      if (selection.equals("Show Progress of Tasks Generated by RichMon")) {
        ShowRichMonTaskProgress(showSQL,tearOff);   
      }
        
      if (selection.equals("List Tuning Tasks")) {
        listTuningTasks(showSQL,tearOff);
      }          
      
      if (selection.equals("List Tuning Tasks Generated by RichMon")) {
        listRichMonTuningTasks(showSQL,tearOff);
      }       
            
      if (selection.equals("Show Implementation Script")) {
        showImplementationScript(showSQL);
      }       
      
      if (selection.equals("Show Task Result") || selection.equals("Show Set Result")) {
        showTuningResult(showSQL);
      }      
      
      if (selection.equals("Show Automatic SQL Tuning Results")) {
        showAutoSQLTuningResults();
      }
    }
    catch (Exception e) {
      ConsoleWindow.displayError(e, this);
    }
  }

  public void listActionPerformed(boolean showSQL, String lastAction) {
    this.showSQL = showSQL;
    listActionPerformed(lastAction, new JFrame());
  }

  public void addItem(String newOption) {
    // check to see whether this option already exists
    boolean dup = false;
    for (int i = 0; i < options.length; i++) {
      if (options[i].equals(newOption)) {
        dup = true;
        break;
      }
    }

    // if its not a duplicate, add it to the options array
    if (!dup) {
      String[] tmp = new String[options.length];
      System.arraycopy(options, 0, tmp, 0, options.length);
      options = new String[options.length + 1];
      System.arraycopy(tmp, 0, options, 0, tmp.length);
      options[options.length - 1] = newOption;
    }
  }
  
  private void createTuningTaskFromCursor(boolean showSQL) {
    
    JPanel sqlIdP = new JPanel();
    JLabel sqlIdL = new JLabel("SQL ID");
    JTextField sqlIdTF = new JTextField();
    sqlIdP.add(sqlIdL);
    sqlIdP.add(sqlIdTF);
    
    JPanel taskNameP = new JPanel();
    JLabel taskNameL = new JLabel("Task Name");
    JTextField taskNameTF = new JTextField();
    taskNameP.add(taskNameL);
    taskNameP.add(taskNameTF);
    taskNameTF.setText("default to 'RICHMON-'+sqlId");
    
    JPanel taskDescriptionP = new JPanel();
    JLabel taskDescriptionL = new JLabel("Task Description");
    JTextField taskDescriptionTF = new JTextField();
    taskDescriptionP.add(taskDescriptionL);
    taskDescriptionP.add(taskDescriptionTF);
    
    JPanel timeLimitP = new JPanel();
    JLabel timeLimitL = new JLabel("Time Limit (secs)");
    JTextField timeLimitTF = new JTextField("1800");
    timeLimitP.add(timeLimitL);
    timeLimitP.add(timeLimitTF);
     
    // set the width's
    Dimension buttonAndComboBoxSize = new Dimension(120,25);
    sqlIdTF.setPreferredSize(buttonAndComboBoxSize);
    taskNameTF.setPreferredSize(buttonAndComboBoxSize);
    taskDescriptionTF.setPreferredSize(buttonAndComboBoxSize);
    timeLimitTF.setPreferredSize(buttonAndComboBoxSize);
    
    
    Object[] options = {sqlIdP, taskNameP, taskDescriptionP, timeLimitP};

    int result = JOptionPane.showOptionDialog(ConnectWindow.getConsoleWindow(),options,"Create Tuning Task...",JOptionPane.OK_CANCEL_OPTION,JOptionPane.OK_CANCEL_OPTION,null,null,null);

    if (debug) System.out.println("result of user entering sqlid: " + result);

    // default the task name
    if (taskNameTF.getText().equals("default to 'RICHMON-'+sqlId")) {
        taskNameTF.setText("RichMon-"+ sqlIdTF.getText().trim());
    }

    // create the sql tuning task

    String createSQLTuningTask = 
    "DECLARE\n" + 
    " taskId varchar2(64);\n" + 
    "BEGIN\n" + 
    "  taskId := DBMS_SQLTUNE.CREATE_TUNING_TASK(sql_id => \'" + sqlIdTF.getText().trim() + 
                                                 "\',task_name => \'" + taskNameTF.getText() + 
                                                 "\',description => \'" + taskDescriptionTF.getText() + 
                                                 "\',time_limit => \'" + timeLimitTF.getText() + "\');\n" + 
    "END;";
      
    if (showSQL) {
      JOptionPane.showMessageDialog(ConnectWindow.getConsoleWindow(),createSQLTuningTask,"Create tuning task...",JOptionPane.INFORMATION_MESSAGE);
    }
    else {
      if (result == 0) {            // result is 0 if user clicked ok but result is 2 if user clicked cancel
        if (debug) System.out.println("SQL Tuning Task: " + createSQLTuningTask);
        try {
          ConnectWindow.getDatabase().executeImmediate(createSQLTuningTask,showSQL,true);
          
          String msg = "Tuning task " + taskNameTF.getText() + " has been created.\n\n" +
                       "Do you want to run this task now.";
          
          result = JOptionPane.showConfirmDialog(ConnectWindow.getConsoleWindow(),msg,"Tuning Task Created...",JOptionPane.YES_NO_OPTION);
          if (debug == true) System.out.println("Run tuning task now: " + result);
          
          if (result == 0) {
            taskName = taskNameTF.getText();
            executeTuningTask(false,false);
          }
        }
        catch (Exception e) {
          ConsoleWindow.displayError(e, this);
        }
      }
    }
  
  }  
  
  private void createTuningTaskFromAWR(boolean showSQL) {
    
    JPanel sqlIdP = new JPanel();
    JLabel sqlIdL = new JLabel("SQL ID");
    JTextField sqlIdTF = new JTextField();
    sqlIdP.add(sqlIdL);
    sqlIdP.add(sqlIdTF);
    
    JPanel startSnapP = new JPanel();
    JLabel startSnapL = new JLabel("Start Snap ID");
    JTextField startSnapTF = new JTextField();
    startSnapP.add(startSnapL);
    startSnapP.add(startSnapTF);
    
    JPanel endSnapP = new JPanel();
    JLabel endSnapL = new JLabel("End Snap Id");
    JTextField endSnapTF = new JTextField();
    endSnapP.add(endSnapL);
    endSnapP.add(endSnapTF);
       
    JPanel taskNameP = new JPanel();
    JLabel taskNameL = new JLabel("Task Name");
    JTextField taskNameTF = new JTextField();
    taskNameP.add(taskNameL);
    taskNameP.add(taskNameTF);
    taskNameTF.setText("default to 'RICHMON-'+sqlId");
    
    JPanel taskDescriptionP = new JPanel();
    JLabel taskDescriptionL = new JLabel("Task Description");
    JTextField taskDescriptionTF = new JTextField();
    taskDescriptionP.add(taskDescriptionL);
    taskDescriptionP.add(taskDescriptionTF);
    
    JPanel timeLimitP = new JPanel();
    JLabel timeLimitL = new JLabel("Time Limit (secs)");
    JTextField timeLimitTF = new JTextField("1800");
    timeLimitP.add(timeLimitL);
    timeLimitP.add(timeLimitTF);
     
    // set the width's
    Dimension buttonAndComboBoxSize = new Dimension(120,25);
    sqlIdTF.setPreferredSize(buttonAndComboBoxSize);
    startSnapTF.setPreferredSize(buttonAndComboBoxSize);
    endSnapTF.setPreferredSize(buttonAndComboBoxSize);
    taskNameTF.setPreferredSize(buttonAndComboBoxSize);
    taskDescriptionTF.setPreferredSize(buttonAndComboBoxSize);
    timeLimitTF.setPreferredSize(buttonAndComboBoxSize);
    
    
    Object[] options = {sqlIdP, startSnapP, endSnapP, taskNameP, taskDescriptionP, timeLimitP};

    int result = JOptionPane.showOptionDialog(ConnectWindow.getConsoleWindow(),options,"Create Tuning Task...",JOptionPane.OK_CANCEL_OPTION,JOptionPane.OK_CANCEL_OPTION,null,null,null);

    if (debug) System.out.println("result of user entering sqlid: " + result);

    // default the task name
    if (taskNameTF.getText().equals("default to 'RICHMON-'+sqlId")) {
        taskNameTF.setText("RichMon-"+ sqlIdTF.getText().trim());
    }

    // create the sql tuning task

    String createSQLTuningTask = 
    "DECLARE\n" + 
    " taskId varchar2(64);\n" + 
    "BEGIN\n" + 
    "  taskId := DBMS_SQLTUNE.CREATE_TUNING_TASK(sql_id => \'" + sqlIdTF.getText().trim() + 
                                                 "\',begin_snap => \'" + startSnapTF.getText() +
                                                 "\',end_snap => \'" + endSnapTF.getText() +
                                                 "\',task_name => \'" + taskNameTF.getText() + 
                                                 "\',description => \'" + taskDescriptionTF.getText() + 
                                                 "\',time_limit => \'" + timeLimitTF.getText() + "\');\n" + 
    "END;";
      
    if (showSQL) {
      JOptionPane.showMessageDialog(ConnectWindow.getConsoleWindow(),createSQLTuningTask,"Create tuning task...",JOptionPane.INFORMATION_MESSAGE);
    }
    else {
      if (result == 0) {            // result is 0 if user clicked ok but result is 2 if user clicked cancel
        if (debug) System.out.println("SQL Tuning Task: " + createSQLTuningTask);
        try {
          ConnectWindow.getDatabase().executeImmediate(createSQLTuningTask,showSQL,true);
          
          String msg = "Tuning task " + taskNameTF.getText() + " has been created.\n\n" +
                       "Do you want to run this task now.";
          
          result = JOptionPane.showConfirmDialog(ConnectWindow.getConsoleWindow(),msg,"Tuning Task Created...",JOptionPane.YES_NO_OPTION);
          if (debug == true) System.out.println("Run tuning task now: " + result);
          
          if (result == 0) {
            taskName = taskNameTF.getText();
            executeTuningTask(false,false);
          }
        }
        catch (Exception e) {
          ConsoleWindow.displayError(e, this);
        }
      }
    }
  
  }  

  
  private void showTaskStatus(boolean showSQL,boolean tearOff) {
    try {
      // prompt for the task name
      Object answer = JOptionPane.showInputDialog(
                scrollP,
                "Enter the Name of the SQL Tuning Task... ",
                "Set Name",
                JOptionPane.QUESTION_MESSAGE,null,null,taskName);
          
      if (answer instanceof Object)  {
        taskName = answer.toString();
        
        if (debug) System.out.println("SQL Tuning Task Name: \n" + setName);
        
        Cursor myCursor = new Cursor("tuningTaskStatus.sql",true);
        Parameters myPars = new Parameters();
        myPars.addParameter("String",taskName);
        Boolean filterByRAC = false;
        Boolean filterByUser = false;
        Boolean includeDecode = false;
        String includeRACPredicatePoint = "default";
        String filterByRACAlias = "none";
        String filterByUserAlias = "none";
        Boolean restrictRows = true;
        Boolean flip = true;
        Boolean eggTimer = true;
        executeDisplayFilterStatement(myCursor, myPars, flip, eggTimer, scrollP, statusBar, showSQL, resultCache, restrictRows, filterByRACAlias, filterByUserAlias, includeDecode, includeRACPredicatePoint, filterByRAC, filterByUser);
      }
    }
    catch (Exception e) {
      ConsoleWindow.displayError(e, this); 
    }
  }  
  
  private void showRichMonTaskStatus(boolean showSQL,boolean tearOff) {
    try {
      Cursor myCursor = new Cursor("tuningTaskStatus.sql",true);
      Parameters myPars = new Parameters();
      myPars.addParameter("String","RichMon%");
      Boolean filterByRAC = false;
      Boolean filterByUser = false;
      Boolean includeDecode = false;
      String includeRACPredicatePoint = "default";
      String filterByRACAlias = "none";
      String filterByUserAlias = "none";
      Boolean restrictRows = true;
      Boolean flip = true;
      Boolean eggTimer = true;
      executeDisplayFilterStatement(myCursor, myPars, flip, eggTimer, scrollP, statusBar, showSQL, resultCache, restrictRows, filterByRACAlias, filterByUserAlias, includeDecode, includeRACPredicatePoint, filterByRAC, filterByUser);
    }
    catch (Exception e) {
      ConsoleWindow.displayError(e, this); 
    }
  }  
  
  private void showTaskProgress(boolean showSQL,boolean tearOff) {
    try {
      // prompt for the task name
      Object answer = JOptionPane.showInputDialog(
                scrollP,
                "Enter the Name of the SQL Tuning Task... ",
                "Set Name",
                JOptionPane.QUESTION_MESSAGE,null,null,taskName);
          
      if (answer instanceof Object)  {
        taskName = answer.toString();
        
        if (debug) System.out.println("SQL Tuning Task Name: \n" + setName);
    
        Cursor myCursor = new Cursor("tuningTaskProgress.sql",true);
        Parameters myPars = new Parameters();
        myPars.addParameter("String",ConnectWindow.getUsername().toUpperCase());
        myPars.addParameter("String",taskName);
        Boolean filterByRAC = false;
        Boolean filterByUser = false;
        Boolean includeDecode = false;
        String includeRACPredicatePoint = "default";
        String filterByRACAlias = "none";
        String filterByUserAlias = "none";
        Boolean restrictRows = true;
        Boolean flip = true;
        Boolean eggTimer = true;
        executeDisplayFilterStatement(myCursor, myPars, flip, eggTimer, scrollP, statusBar, showSQL, resultCache, restrictRows, filterByRACAlias, filterByUserAlias, includeDecode, includeRACPredicatePoint, filterByRAC, filterByUser);
      }
    }
    catch (Exception e) {
      ConsoleWindow.displayError(e, this); 
    }
  }
  
  private void ShowRichMonTaskProgress(boolean showSQL,boolean tearOff) {
    try {               
      Cursor myCursor = new Cursor("tuningTaskProgress.sql",true);
      Parameters myPars = new Parameters();
      myPars.addParameter("String","%");
      myPars.addParameter("String","RichMon%");
      Boolean filterByRAC = false;
      Boolean filterByUser = false;
      Boolean includeDecode = false;
      String includeRACPredicatePoint = "default";
      String filterByRACAlias = "none";
      String filterByUserAlias = "none";
      Boolean restrictRows = true;
      Boolean flip = true;
      Boolean eggTimer = true;
      executeDisplayFilterStatement(myCursor, myPars, flip, eggTimer, scrollP, statusBar, showSQL, resultCache, restrictRows, filterByRACAlias, filterByUserAlias, includeDecode, includeRACPredicatePoint, filterByRAC, filterByUser);
    }
    catch (Exception e) {
      ConsoleWindow.displayError(e, this); 
    }
  }
  
  private void executeTuningTask(boolean showSQL, boolean promptForTaskName) {
    
    try {
      String name = taskName;
      if (taskName.equals("RichMon")) name = setName;
      
      // prompt for the task name
      Object answer = "";
      
      if (promptForTaskName) {
        answer = JOptionPane.showInputDialog(
                  scrollP,
                  "WARNING:  Running a tuning task from RichMon will open a second db connection.  \n" +  
                  "Do not close RichMon before the task has completed.  \n\n" +
                  "Enter the Name of the SQL Tuning Task/Set to execute... ",
                  "Set Name",
                  JOptionPane.QUESTION_MESSAGE,null,null,name);
      }
          
      if (answer.toString().length() > 0) name = answer.toString();
      if (showSQL) {
        String msg = "exec dbms_sqltune.execute_tuning_task(task_name => " + name + ")";
        JOptionPane.showMessageDialog(ConnectWindow.getConsoleWindow(),msg,"Create tuning task...",JOptionPane.INFORMATION_MESSAGE);
      }
      else {
        if (answer != null)  {
          if (promptForTaskName) name = answer.toString();
          final String myTaskName = name;
          /*
           * To avoid tieing up the database connection for a long time, open a new connection for this execution
           */
          
  
          Thread tuningTaskThread = new Thread ( new Runnable() {
            public void run() {
              Database tuningTaskDatabase = new Database();
  
                  try {
                    if (ConnectWindow.isThickDriver()) {
                      tuningTaskDatabase.openConnection(ConnectWindow.getServiceNameOrSID(), 
                                                        ConnectWindow.getUsername(), 
                                                        ConnectWindow.getPassword(), 
                                                        ConnectWindow.getSYSDBA());
                    } else {
                      tuningTaskDatabase.openConnection(ConnectWindow.getServiceNameOrSID(), 
                                                        ConnectWindow.getUsername(), 
                                                        ConnectWindow.getPassword(), 
                                                        ConnectWindow.getSYSDBA(), 
                                                        ConnectWindow.getHostName(), 
                                                        ConnectWindow.getPortNumber(),
                                                        ConnectWindow.serviceNameCB.isSelected());
                    }
                    
                    tuningTaskDatabase.executeTuningTask(myTaskName);
                    tuningTaskDatabase.closeConnection();
                  } catch (Exception e) {
                ConsoleWindow.displayError(e,this,"Error executing a SQL Tuning Task ");
              }
              
            }
          });
          
          tuningTaskThread.setName("tuningTaskThread");
          tuningTaskThread.setDaemon(true);
          tuningTaskThread.start();
          
          String msg = "The tuning task " + myTaskName + " is now being executed.";
          JOptionPane.showMessageDialog(ConsoleWindow.getPerformancePanel(),msg,"Tuning Task Executing...",JOptionPane.OK_OPTION);
        }
      }
    }
    catch (Exception e) {
      ConsoleWindow.displayError(e, this);
    }
  }
    
  private void listTuningTasks(boolean showSQL,boolean tearOff) {
    try {
      Cursor myCursor = new Cursor("dba_advisor_tasks",true);
      Parameters myPars = new Parameters();
      Boolean filterByRAC = false;
      Boolean filterByUser = false;
      Boolean includeDecode = false;
      String includeRACPredicatePoint = "default";
      String filterByRACAlias = "none";
      String filterByUserAlias = "none";
      Boolean restrictRows = true;
      Boolean flip = true;
      Boolean eggTimer = true;
      executeDisplayFilterStatement(myCursor, myPars, flip, eggTimer, scrollP, statusBar, showSQL, resultCache, restrictRows, filterByRACAlias, filterByUserAlias, includeDecode, includeRACPredicatePoint, filterByRAC, filterByUser);
    }
    catch (Exception e) {
      ConsoleWindow.displayError(e, this);
    }
  }  
  
  private void listRichMonTuningTasks(boolean showSQL,boolean tearOff) {
    try {
     
      Cursor myCursor = new Cursor("dbaAdvisorTasks.sql",true);
      Parameters myPars = new Parameters();
      myPars.addParameter("String", "RichMon%");
      Boolean filterByRAC = false;
      Boolean filterByUser = false;
      Boolean includeDecode = false;
      String includeRACPredicatePoint = "default";
      String filterByRACAlias = "none";
      String filterByUserAlias = "none";
      Boolean restrictRows = true;
      Boolean flip = true;
      Boolean eggTimer = true;
      executeDisplayFilterStatement(myCursor, myPars, flip, eggTimer, scrollP, statusBar, showSQL, resultCache, restrictRows, filterByRACAlias, filterByUserAlias, includeDecode, includeRACPredicatePoint, filterByRAC, filterByUser);
    }
    catch (Exception e) {
      ConsoleWindow.displayError(e, this);
    }
  }
  
    
  private void showTuningResult(boolean showSQL) {
    // prompt for the task/set name
    String name = taskName;
    if (taskName.equals("RichMon")) name = setName;
    
    Object answer = JOptionPane.showInputDialog(
              scrollP,
              "Enter the Name of the SQL Tuning Task or Task Set... ",
              "Task or Task Set Name",
              JOptionPane.QUESTION_MESSAGE,null,null,taskName);
        
    if (answer instanceof Object)  {
      name = answer.toString();
      
      if (debug) System.out.println("SQL Tuning Task/Set Name: \n" + name);
           
      try {      
        Cursor myCursor = new Cursor("RichMonTuningResultQuery2",true);
        myCursor.setSQLTxtOriginal("SELECT DBMS_SQLTUNE.REPORT_TUNING_TASK ( \'" + name + "\' ) \n" + 
                         "FROM dual \n");
        Parameters myPars = new Parameters();
        Boolean filterByRAC = false;
        Boolean filterByUser = false;
        Boolean includeDecode = false;
        String includeRACPredicatePoint = "default";
        String filterByRACAlias = "none";
        String filterByUserAlias = "none";
        Boolean restrictRows = true;
        Boolean flip = true;
        Boolean eggTimer = true;
        QueryResult myResult = executeFilterStatement(myCursor, myPars, flip, eggTimer, resultCache, restrictRows, filterByRACAlias, filterByUserAlias, includeDecode, includeRACPredicatePoint, filterByRAC, filterByUser);
        
        // display tuning task result on screen
        QueryResult fakeResult = createQueryResultFromString(myResult,"SQL Tuning Task");
        ExecuteDisplay.displayTable(fakeResult, scrollP, showSQL, statusBar);
        
        
        // Save tuning task to disk
        String resultString =  ExecuteDisplay.createOutputString(fakeResult, false);
        
        String fileName = "SQL Tuning Task Result " + ConsoleWindow.getDatabaseName() + " " + name + ".txt";
        fileName = fileName.replaceAll(":"," ");

        File tuningTaskResultFile = new File(ConnectWindow.getBaseDir() + "\\Output\\" + fileName);
        if (ConnectWindow.isLinux()) tuningTaskResultFile = new File(ConnectWindow.getBaseDir() + "//Output//" + fileName);
      
        BufferedWriter tuningTaskResultFileWriter = new BufferedWriter(new FileWriter(tuningTaskResultFile));
        tuningTaskResultFileWriter.write(resultString);
        tuningTaskResultFileWriter.close();
        
        String msg = "The SQL Tuning Task result has also been saved to:\n\n" +
                     tuningTaskResultFile.toString();
        JOptionPane.showMessageDialog(scrollP,msg,"Saved...",JOptionPane.INFORMATION_MESSAGE);
      }
      catch (Exception e) {
        ConsoleWindow.displayError(e, this);
      }
    }
  }  
  
  private void showImplementationScript(boolean showSQL) {
    // prompt for the task name
    String name = taskName;
    if (taskName.equals("RichMon")) name = setName;
    
    Object answer = JOptionPane.showInputDialog(
              scrollP,
              "Enter the Name of the SQL Tuning Task or Task Set... ",
              "Task or Task Set Name",
              JOptionPane.QUESTION_MESSAGE,null,null,taskName);
        
    if (answer instanceof Object)  {
      name = answer.toString();
      
      if (debug) System.out.println("SQL Tuning Task/Set Name: \n" + name);
           
      try {
        Cursor myCursor = new Cursor("RichMonTuningResultQuery",true);
        myCursor.setSQLTxtOriginal("SELECT DBMS_SQLTUNE.SCRIPT_TUNING_TASK(\'" + name + "\' ) \n" + 
                         "FROM dual \n");
        Parameters myPars = new Parameters();
        Boolean filterByRAC = false;
        Boolean filterByUser = false;
        Boolean includeDecode = false;
        String includeRACPredicatePoint = "default";
        String filterByRACAlias = "none";
        String filterByUserAlias = "none";
        Boolean restrictRows = true;
        Boolean flip = true;
        Boolean eggTimer = true;
        QueryResult myResult = executeFilterStatement(myCursor, myPars, flip, eggTimer, resultCache, restrictRows, filterByRACAlias, filterByUserAlias, includeDecode, includeRACPredicatePoint, filterByRAC, filterByUser);
       
        QueryResult fakeResult = createQueryResultFromString(myResult,"Implementation Script");
        
        ExecuteDisplay.displayTable(fakeResult, scrollP, showSQL, statusBar);
        
        
        // save auto sql tuning result to disk
        
        String resultString =  ExecuteDisplay.createOutputString(fakeResult, false);

        String fileName = "Implementation Script " + ConsoleWindow.getDatabaseName() + " for " + name + ".txt";
        fileName = fileName.replaceAll(":"," ");
        
        File tuningTaskResultFile = new File(ConnectWindow.getBaseDir() + "\\Output\\" + fileName);
        if (ConnectWindow.isLinux()) tuningTaskResultFile = new File(ConnectWindow.getBaseDir() + "//Output//" + fileName);
        
        BufferedWriter tuningTaskResultFileWriter = new BufferedWriter(new FileWriter(tuningTaskResultFile));
        tuningTaskResultFileWriter.write(resultString);
        tuningTaskResultFileWriter.close();
        
        
        String msg = "The Automatic SQL Tuning Task result has also been saved to:\n\n" +
                     tuningTaskResultFile.toString();
        JOptionPane.showMessageDialog(scrollP, msg,"Saved...",JOptionPane.INFORMATION_MESSAGE);
      }
      catch (Exception e) {
        ConsoleWindow.displayError(e, this);
      }
    }
  }
  
  
  private void  showAutoSQLTuningResults() {
    
    try {    
      Cursor myCursor = new Cursor("advisorExecutionTimes.sql",true);
      Parameters myPars = new Parameters();
      myPars.addParameter("String", "SYS_AUTO_SQL_TUNING_TASK");
      Boolean filterByRAC = false;
      Boolean filterByUser = false;
      Boolean includeDecode = false;
      String includeRACPredicatePoint = "default";
      String filterByRACAlias = "none";
      String filterByUserAlias = "none";
      Boolean restrictRows = true;
      Boolean flip = false;
      Boolean eggTimer = true;
      ResultCache noResultCache = null;
      QueryResult myResult = executeFilterStatement(myCursor, myPars, flip, eggTimer, noResultCache, restrictRows, filterByRACAlias, filterByUserAlias, includeDecode, includeRACPredicatePoint, filterByRAC, filterByUser);
      
      if (myResult.getNumRows() > 0) {
        String[][] resultSet = myResult.getResultSetAsStringArray();

        Object[] advisorExecutions = new Object[resultSet.length];
        for (int i = 0; i < resultSet.length; i++) {
          advisorExecutions[i] = resultSet[i][1] + " - " + resultSet[i][2] + "     : execution status => " + resultSet[i][3];
        }
        
        String s = (String)JOptionPane.showInputDialog(scrollP, "The Automatica SQL Tuning Task is run every night for 1hr (by default).\n\n" +
                                                             "The report can be generated for any of the shown executions.  Please select the execution you require.\n\n"
            , "Customized Dialog", JOptionPane.PLAIN_MESSAGE, null, advisorExecutions, advisorExecutions[0]);
        
        String selectedExecutionStartTime = s.substring(0,s.indexOf(" - "));
        
        // now that we know the selected execution start date we need to grab the execution_name
        String executionName = null;
        for (int i=0; i < myResult.getNumRows(); i++) {
          if (resultSet[i][1].equals(selectedExecutionStartTime)) executionName = resultSet[i][4].toString();
        }
        
        // get the report and display on screen
        myCursor = new Cursor("RichMonAutomaticTuningResultQuery",true);
        myCursor.setSQLTxtOriginal("SELECT DBMS_AUTO_SQLTUNE.REPORT_AUTO_TUNING_TASK(\'" + executionName + "\',\'" + executionName + "\',\'TEXT\',\'ALL\',\'ALL\') "+ 
                         "FROM dual \n");
        myPars = new Parameters();
        filterByRAC = false;
        filterByUser = false;
        includeDecode = false;
        includeRACPredicatePoint = "default";
        filterByRACAlias = "none";
        filterByUserAlias = "none";
        restrictRows = true;
        flip = true;
        eggTimer = true;
        myResult = executeFilterStatement(myCursor, myPars, flip, eggTimer, resultCache, restrictRows, filterByRACAlias, filterByUserAlias, includeDecode, includeRACPredicatePoint, filterByRAC, filterByUser);

        resultSet = myResult.getResultSetAsStringArray();
        
        QueryResult fakeResult = createQueryResultFromString(myResult,"Automatic SQL Tuning Task Result");
        
        ExecuteDisplay.displayTable(fakeResult, scrollP, showSQL, statusBar);
        
        
        // save auto sql tuning result to disk
        String resultString =  ExecuteDisplay.createOutputString(fakeResult, false);
        
        String fileName = "Automatic SQL Tuning Task Result " + ConsoleWindow.getDatabaseName()  + " for "+ selectedExecutionStartTime + ".txt";
        fileName = fileName.replaceAll(":"," ");
        
        File tuningTaskResultFile = new File(ConnectWindow.getBaseDir() + "\\Output\\" + fileName);
        if (ConnectWindow.isLinux()) tuningTaskResultFile = new File(ConnectWindow.getBaseDir() + "//Output//" + fileName);
        
        BufferedWriter tuningTaskResultFileWriter = new BufferedWriter(new FileWriter(tuningTaskResultFile));
        tuningTaskResultFileWriter.write(resultString);
        tuningTaskResultFileWriter.close();
        
        
        String msg = "The Automatic SQL Tuning Task result has also been saved to:\n\n" +
                     tuningTaskResultFile.toString();
        JOptionPane.showMessageDialog(scrollP, msg,"Saved...",JOptionPane.INFORMATION_MESSAGE);
      }
      else {

          JOptionPane.showMessageDialog(this, "No executions found", "Error", JOptionPane.ERROR_MESSAGE);
      }
      
      
      
    } catch (Exception e) {
      ConsoleWindow.displayError(e, this,"getting automatic sql tuning results");
    }
  }
  
  private QueryResult createQueryResultFromString(QueryResult myResult, String heading) {
    
    String[][] resultSet = myResult.getResultSetAsStringArray();
    String result = resultSet[0][0];
    
    // create the new QueryResult 
    QueryResult newResult = new QueryResult();
    
    // split the string into lines 
    String[] lines = new String[1000000];
    StringBuffer line = new StringBuffer();
    char myChar;
    int numLines = 0;
    
    for (int i=0; i < result.length(); i++) {
      myChar = result.charAt(i);
      if (result.charAt(i) != '\n') {
        line.append(myChar);
      }
      else {
        lines[numLines++] = line.toString();
        line = new StringBuffer();
      }
    }
    
    lines[numLines++] = line.toString();
    
    // convert the String into a vector of vectors and add it to the QueryResult 
    Vector tmpV = new Vector(1);
    for (int i=0; i < numLines; i++) {
      tmpV.add(lines[i]); 
      newResult.addResultRow(tmpV);
      tmpV = new Vector(1);
    }

    // update the QueryResult with the number of Rows 
    newResult.setNumRows(numLines);
    newResult.setExecutionTime(myResult.getExecutionTime());
    newResult.setExecutionClockTime(myResult.getExecutionClockTime());
    
    // update the QueryResult with the column Widths 
    int maxColWidth = 40;
    for (int i=0; i < numLines; i++) {
      maxColWidth = Math.max(maxColWidth,lines[i].length());
    }
    
    int [] colWidths = new int[1];
    colWidths[0] = maxColWidth;
    newResult.setColumnWidths(colWidths);
    newResult.setNumCols(colWidths.length);
    
    String[] resultHeadings = new String[1];
    resultHeadings[0] = heading;
    
    newResult.setResultHeadings(resultHeadings);
    
    return newResult;
  }
}
